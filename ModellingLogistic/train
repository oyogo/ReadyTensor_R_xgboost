#!/usr/bin/env Rscript

library(data.table) # Opted for this, 1. Because its really fast 2. dplyr conflicted with plumber
library(rjson) # for handling json data
library(xgboost)
# use pattern to read data : this is to make the model generic 
fname_train <- dir(path = "./../ml_vol/inputs/data/training/binaryClassificationBaseMainInput/", pattern = "\\_train.csv$")
fname_schema <- dir(path = "./../ml_vol/inputs/data_config/", pattern = "\\_schema.json$")

# read in the schema so that we extract the response variable
dataschema <- fromJSON(file = paste0("./../ml_vol/inputs/data_config/",fname_schema))

# import the training data 
genericdata <- fread(paste0("./../ml_vol/inputs/data/training/binaryClassificationBaseMainInput/",fname_train))

# call the preprocessing pipeline 
source("preprocessor.R")


output_vector <- preprocessing(fname_train=fname_train,fname_schema=fname_schema,genericdata=genericdata,dataschema=dataschema)[[2]]
modelmat <- preprocessing(fname_train=fname_train,fname_schema=fname_schema,genericdata=genericdata,dataschema=dataschema)[[1]]
features <- preprocessing(fname_train=fname_train,fname_schema=fname_schema,genericdata=genericdata,dataschema=dataschema)[[6]]
id <- preprocessing(fname_train=fname_train,fname_schema=fname_schema,genericdata=genericdata,dataschema=dataschema)[[3]]
# function to train the model  and save it back into the mounted volume
lets_train <- function(dat,rvar){

  bst <- xgboost(data = dat, label = output_vector,#training_data[,c(eval(rvar))], 
                 nround = 10, params = list(
    booster = "gbtree",
    objective = "binary:logistic",
    eval_metric = "auc"
  ))
  
  # save the model into the artifacts folder in the attached volume.
  saveRDS(bst, "./../ml_vol/model/artifacts/model.rds")
  saveRDS(features,"./../ml_vol/model/artifacts/features.rds")

}

# calling the model
glmModel <- lets_train(dat=modelmat, rvar = output_vector)

